Arrays

    type[] (name) = {Elements of the rainbow};

    Or if you want to make an array with ___ amount of terms in it,

    type[] name = new type[num_of_terms];

    for 2+ d arrays,

    type[][] name = follow steps above

Loops

    while (condition){

    }

    for (type element : collection){
        (very similar to for i in (list) in python, must specify the list type)
    }

    for (define variable; condition; code to update variable) {
	// code to run
    }
    EX. for(int i = 0; i < 5; i++)

Functions

    public (- optional) static (return type) (name)(argument type arguments){

    }
    EX. static double returnDouble(double x)
    
    to call Functions
    (name)(values)

Classes

    public class (capital Name) {
        public final (variable type variable name, similar to self x = x);

        (Constructor - how to initialize an object)
        public Point(all variables){
            this.var1 = var1
            this.var2 = var2
        }
        (Class Methods)
        public (return type) (method name)((input var type)(var name)){
            **code**
            return (var) *Var must be the same return type as specified above 
        }
        (toString) a method to make the printed object's values legible to humans

        @Override *important keyword, overrides default toString method
        public String toString(){
            return (format of things surrounding the object's values)
        }
    }

    initializing an object

    (class name) (object name) = new (class name(values for variables))

ArrayLists
    
    *Must have *import java.util.ArrayLists;* - imports ArrayLists*

    initialize ArrayLists
    ArrayList<(capitalized full word of type of list) (list name) = new ArrayList<>();